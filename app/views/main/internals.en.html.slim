- title = "CryFS: How it works"
- description = "A description of the CryFS internals."
-content_for :head do
  meta property="og:title" content="#{title}"
  meta property="og:url" content=url_for(action: 'internals', controller: 'main', protocol: 'https', only_path: false)
  meta property="og:type" content="article"
  meta property="article:author" content="sebastian.messmer"
  meta property="og:image" content=image_url("logo.png")
  meta property="og:description" content="#{description}"
  meta name="description" content="#{description}"
  title #{title}

section.section-1
  .container
    h1 How it works
    p In the following, we explain how CryFS works behind the scenes and how it achieves its security goals.
      Nevertheless, the description can be a bit technical in some points.
    p If you're rather interested in using CryFS, take a look at the #{link_to "CryFS Tutorial", {controller: "main", action: "documentation"}}.

    h2 Storing data
    p The goal of CryFS is to keep not only file contents, but also file sizes, metadata and directory structure confidential.
    p To hide file sizes, CryFS splits the content of a file into same-size blocks and encrypts these blocks individually.
      A tree structure is used to remember how the blocks belong together to form a file.
      This tree structure has very little overhead and is also stored using encrypted same-size blocks.
      To hide file metadata and directory structure, they are also represented using encrypted same-size blocks.
    p Each encrypted block is stored as a file in the base directory, using a random ID as filename.
      That is, an attacker can only see a set of encrypted same-size files in the base directory and can't see
      contents, file sizes, metadata or directory structure.
    p The encryption key used for encrypting blocks is chosen randomly when the file system is created.
      It is stored in a configuration file, which is then encrypted using the password chosen by the user.

    h2 Configuration File
    p The base directory also contains a configuration file with the information CryFS needs to decrypt it.
      This configuration file is encrypted and integrity-checked using the password chosen by the user, so an attacker cannot read or modify it.
    p The information stored in the configuration file includes the following.
    ul
      li The cipher used (e.g. <code>aes-256-gcm</code>)
      li The encryption key used for encrypting blocks
      li The block ID for the block storing the root directory (entry point for the file system)
    p The configuration file is encrypted twice, once with <code>aes-256-gcm</code> and once with the cipher chosen by the user.
      This way, if the user doesn't trust <code>aes-256-gcm</code> for some reason,
      they can choose another cipher and still be secure.
      The keys for both encryption steps are generated from the user-chosen password using <a href="https://en.wikipedia.org/wiki/Scrypt">scrypt</a>.
    p In detail, all configuration values are encrypted with the user-chosen cipher,
      the name of the user-chosen cipher is prepended (so CryFS knows how to decrypt it) and the result is encrypted
      using <code>aes-256-gcm</code> (so an attacker cannot see which cipher is used).
      As a last step, the scrypt configuration parameters needed to generate the key from the user password are prepended.
      When decrypting the configuration file, CryFS first reads the scrypt parameters
      and generates the keys for both encryption layers using the user password.
      Then, it decrypts the first layer and reads the cipher chosen by the user.
      Using this cipher, it decrypts the second layer and can read the configuration values.
    p The integrity of the configuration file depends on <code>aes-256-gcm</code>.
      This cipher is a standard cipher and believed to be very secure.
      If, however, you don't trust the integrity of <code>aes-256-gcm</code> and want to use another cipher instead,
      we recommend adding the <kbd>--cipher xxx</kbd> parameter each time you call CryFS. This way, CryFS can check
      that the cipher used by the filesystem is the one you actually specified.
    p Alternatively, you can store the configuration file outside of the base directory and not upload it into the cloud.
      This is possible using the <kbd>--config</kbd> parameter when calling CryFS.

    h2 Security Analysis
    p The security of CryFS has been proven in a <a href="/cryfs_mathesis.pdf">master's thesis</a> using a game-based security approach.
      The thesis also contains a detailed description of the inner workings of CryFS.
    p The current version meets all security goals regarding confidentiality of file contents, size, metadata and directory structure.
      The integrity goals mentioned in the thesis are not fully implemented yet.
      By using an authenticated encryption scheme like <code>aes-256-gcm</code>, the encrypted blocks are secure against being modified by an attacker.
      However, in the current implementation, an attacker could for example roll back the filesystem by replacing blocks with an earlier valid version of the same block.
      This issue will be addressed in future versions.

    #call-to-action.well.well-lg.col-md-offset-2.col-md-8
      .text-center
        p.lead Get started with the
        =link_to "Tutorial", {controller: "main", action: "documentation"}, class: "btn btn-primary btn-lg"